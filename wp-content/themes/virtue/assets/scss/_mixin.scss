
/* border radius */
@mixin border-radius($radius) {
    -moz-border-radius: $radius;
    -webkit-border-radius: $radius;
    border-radius: $radius;
}

/* box shadow */
@mixin box-shadow($value) {
    -webkit-box-shadow: $value;
    -moz-box-shadow: $value;
    box-shadow: $value;
}

/* box sizing */
@mixin box-sizing($box-model) {
    -webkit-box-sizing: $box-model;
    -moz-box-sizing: $box-model;
    box-sizing: $box-model;
}

/* calculate */
@mixin calc($property, $expression) {
    #{$property}: -moz-calc(#{$expression});
    #{$property}: -webkit-calc(#{$expression});
    #{$property}: calc(#{$expression});
}

/* transform */
@mixin transform($transforms) {
    -webkit-transform: $transforms;
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    transform: $transforms;
}

/* transition */
@mixin transition($transition: all 0.3s ease) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}

/* opacity */
@mixin opacity($opacity) {
    opacity: $opacity;
    filter: alpha(opacity=$opacity*100);
}

/* breakpoint with one condition(min or max) */
$mq-support: true !default;
$mq-fixed-value: 1024px;

@mixin bp($feature, $value) {
    // Set global device param
    $media: only screen;

    // Media queries supported
    @if $mq-support == true {

        @media #{$media} and ($feature: $value) {
            @content;
        }

        // Media queries not supported
    } @else {

        @if $feature == 'min-width' {
            @if $value <= $mq-fixed-value {
                @content;
            }
        } @else if $feature == 'max-width' {
            @if $value >= $mq-fixed-value {
                @content;
            }
        }

    }
}

/* breakpoint with two conditions (min and max) */
@mixin small-bp($min-width, $max-width) {
    // Set global device param
    $media: only screen;
    // Media queries supported
    @if $mq-support == true {
        @media #{$media} and ('min-width': $min-width) and ('max-width': $max-width) {
            @content;
        }
    }
}

/* extend placeholder */
$breakpoints: (
        'small': 480px,
        'mobile': 767px,
        'tablet': 1024px
);
$default-breakpoint: root;
$current-breakpoint: $default-breakpoint;
$placeholders: ();

@mixin placeholder($name) {
    // If placeholder doesn't exist yet in `$placeholders` list
    @if not index($placeholders, $name) {
        // Store its name
        $placeholders: append($placeholders, $name) !global;

        // At root level
        @at-root {
            // Looping through `$breakpoints`
            @each $breakpoint, $value in $breakpoints {
                // Opening a media query block
                @media (min-width: $value) {
                    // Generating a placeholder
                    // Called $name-$breakpoint
                    %#{$name}-#{$breakpoint} {
                        @content;
                    }
                }
            }

            // And dumping a placeholder out of any media query as well
            // so basically at root level
            %#{$name}-#{$default-breakpoint} {
                @content;
            }
        }
    }

        // If placeholder already exists, just warn the user
    @else {
        @warn "Placeholder `#{$name}` already exists.";
    }
}

@mixin font($name) {
    @extend %#{$name}-#{$current-breakpoint} !optional;
}